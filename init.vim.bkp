"options
"
set viminfo='100,n$HOME/.vim/files/info/viminfo
"relative and absolute number simulte simultaneously
set relativenumber
set number
"enable mouse selection
set mouse=a
"smartcase search
set ignorecase
set smartcase
"syntax highlight
syntax on
" important!!
set termguicolors
let g:terminal_color_0  = '#2e3436'
let g:terminal_color_1  = '#cc0000'
let g:terminal_color_2  = '#4e9a06'
let g:terminal_color_3  = '#c4a000'
let g:terminal_color_4  = '#3465a4'
let g:terminal_color_5  = '#75507b'
let g:terminal_color_6  = '#0b939b'
let g:terminal_color_7  = '#d3d7cf'
let g:terminal_color_8  = '#555753'
let g:terminal_color_9  = '#ef2929'
let g:terminal_color_10 = '#8ae234'
let g:terminal_color_11 = '#fce94f'
let g:terminal_color_12 = '#729fcf'
let g:terminal_color_13 = '#ad7fa8'
let g:terminal_color_14 = '#00f5e9'
let g:terminal_color_15 = '#eeeeec'
"spaces instead tabs
set expandtab
set tabstop=2
set shiftwidth=2
"don't close buffer, hide it instead
set hidden
"confirm save on q
set confirm
"disable annoying search highlight
"set nohlsearch
"change active directory based on current active file
set autochdir
"indent based on filetype
filetype plugin on
"start scrolling before reaching 15th line
set scrolloff=25
let g:airline_powerline_fonts = 1

"cursor shape depending on mode
let &t_SI = "\<Esc>[3 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"init vim-plug
call plug#begin ('~/.vim/plugged')
"nightfly
Plug 'bluz71/vim-nightfly-guicolors'
"Highlight yanked text
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 300
"CMD line complete
Plug 'vim-scripts/CmdlineComplete'

"Hex color highlight
Plug 'chrisbra/Colorizer'

"Haxe
Plug 'jdonaldson/vaxe'

" Godot support
Plug 'habamax/vim-godot'

"colorscheme changer
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'

" Start
Plug 'glepnir/dashboard-nvim'
let g:dashboard_default_executive = 'fzf'
let g:dashboard_custom_header = [
  \'',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣴⣦⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⣠⣾⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣿⣿⣶⡀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⣴⣿⣿⠟⠁⠀⠀⠀⣶⣶⣶⣶⡆⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⠀⠀⠀ ',
  \'⠀⠀⣼⣿⣿⠋⠀⠀⠀⠀⠀⠛⠛⢻⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣧⠀⠀ ',
  \'⠀⢸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡇⠀ ',
  \'⠀⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀ ',
  \'⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡟⢹⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⣹⣿⣿⠀ ',
  \'⠀⣿⣿⣷⠀⠀⠀⠀⠀⠀⣰⣿⣿⠏⠀⠀⢻⣿⣿⡄⠀⠀⠀⠀⠀⠀⣿⣿⡿⠀ ',
  \'⠀⢸⣿⣿⡆⠀⠀⠀⠀⣴⣿⡿⠃⠀⠀⠀⠈⢿⣿⣷⣤⣤⡆⠀⠀⣰⣿⣿⠇⠀ ',
  \'⠀⠀⢻⣿⣿⣄⠀⠀⠾⠿⠿⠁⠀⠀⠀⠀⠀⠘⣿⣿⡿⠿⠛⠀⣰⣿⣿⡟⠀⠀ ',
  \'⠀⠀⠀⠻⣿⣿⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⠏⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠈⠻⣿⣿⣷⣤⣄⡀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⠟⠁⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⠛⠛⠛⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'  Right man in the wrong place ',
  \'  can make all the difference  ',
  \'         in the world          ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⠛⠛⠛⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ',
  \]

"linter
"Plug 'w0rp/ale'

" let g:ale_fixers = {
"  \ 'javascript': ['eslint'],
"  \ 'typescript': ['eslint']
"  \ }

" let g:ale_sign_error = 'X'
" let g:ale_sign_warning = '!'
" let g:ale_fix_on_save = 1

"Shorter command for Prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

"ranger integration
"Plug 'francoiscabrol/ranger.vim'
" Make Ranger to be hidden after picking a file
let g:rnvimr_enable_picker = 1

" Disable a border for floating window
" let g:rnvimr_draw_border = 0

" Make Neovim wipe the buffers corresponding to the files deleted by Ranger
let g:rnvimr_enable_bw = 1

"colorschemes
"shitton
Plug 'flazz/vim-colorschemes'
"
Plug 'kyazdani42/blue-moon'
Plug 'kadekillary/skull-vim'

"change surroundings (e.g " -> ', or <div> -> <span>, etc.)
Plug 'tpope/vim-surround'

"autochange tags
Plug 'AndrewRadev/tagalong.vim'

" Make Ranger replace Netrw and be the file explorer
" let g:rnvimr_enable_ex = 1
let g:NERDTreeHijackNetrw = 0 " Add this line if you use NERDTree
let g:lf_replace_netrw = 1 " Open lf when vim opens a directory
" LF vim integration
Plug 'ptzz/lf.vim'
let g:lf_map_keys = 0
" Terminal
Plug 'voldikss/vim-floaterm'
"v--- this let's you open files from terminal by gf
function s:open_in_normal_window() abort
  let f = findfile(expand('<cfile>'))
  if !empty(f) && has_key(nvim_win_get_config(win_getid()), 'anchor')
    FloatermHide
    execute 'e ' . f
  endif
endfunction

autocmd FileType floaterm nnoremap <silent><buffer> gf :call <SID>open_in_normal_window()<CR>

" Plug 'rafaqz/ranger.vim'
"nnn file manager
let g:nnn#replace_netrw = 1
"Plug 'mcchrish/nnn.vim'
let g:nnn#layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }
let g:nnn#set_default_mappings = 0
" nmap <leader>e  :NnnPicker %:p:h<CR>
nmap <leader>e  :Lf<CR>

" Treesitter for better highlighting
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update

"lightline (bottomline)
Plug 'itchyny/lightline.vim'
"Emmet (HTML + CSS super fucking cool plugin)
Plug 'mattn/emmet-vim'
"Auto pairs (brackets, parens, quotes, etc.)
"Plug 'jiangmiao/auto-pairs'
"Startify
"Plug 'mhinz/vim-startify'
"Nerd Commenter
"Plug 'preservim/nerdcommenter'
"Commenter
Plug 'tpope/vim-commentary'
""Tabline
"Plug 'bagrat/vim-buffet'
"Rooter (change dir without annoying bullshit)
Plug 'airblade/vim-rooter'
"Airline
"Plug 'vim-airline/vim-airline'
"Tagbar
"Plug 'majutsushi/tagbar'
Plug 'preservim/tagbar'

"Theme
"Plug 'sainnhe/sonokai'

" minimap
"Plug 'severin-lemaignan/vim-minimap'
" html highlight tags
Plug 'Valloric/MatchTagAlways'

let g:mta_filetypes = {
	\'typescriptreact': 1,
	\ 'html' : 1,
	\ 'xhtml' : 1,
	\ 'xml' : 1,
	\ 'jinja' : 1, }
" the configuration options should be placed before `colorscheme sonokai`
"let g:sonokai_style = 'andromeda'
"let g:sonokai_enable_italic = 1
"let g:sonokai_disable_italic_comment = 1

"colorscheme sonokai
"Syntax highlighters
" Plug 'sheerun/vim-polyglot'
"NERDTree git
"Plug 'Xuyuanp/nerdtree-git-plugin'

"Buf tabline
"Plug 'ap/vim-buftabline'

"easymotion
"Plug 'easymotion/vim-easymotion'

"Quit VIM if NERDTree is the only tab open 

"Typescript highlighter
" Plug 'leafgarland/typescript-vim'
"JSX-TSX highlighter
"Plug 'peitalin/vim-jsx-typescript'

"unused plugins
"
" \ 'coc-tslint-plugin',
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-eslint',
      \ 'coc-snippets',
      \ 'coc-prettier',
      \ 'coc-json',
      \ 'coc-html',
      \ 'coc-angular',
      \ 'coc-godot',
      \ 'coc-yaml'
      \]
"YouCompleteMe
"Plug 'Valloric/YouCompleteMe', {'do': './install.py --all'}

"endwise"
"Plug 'tpope/vim-endwise'

"delimitMate
"This plug-in provides automatic closing of 
"quotes, parenthesis, brackets, etc., 
"besides some other related features that should make 
"your time in insert mode a little bit easier,
"like syntax awareness 
"(will not insert the closing delimiter in comments 
"and other configurable regions), 
"and expansions (off by default), and some more.
Plug 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

"CtrlP (fuzzy search over files)
"Plug 'ctrlpvim/ctrlp.vim'
" Plug 'kien/ctrlp.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_preview_window = 'right:60%'
" Telescope (fzf alternative)
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
if executable('rg')
  let g:rg_derive_root='true'
endif

let g:blamer_template = '<committer>, <committer-mail> <committer-time> • <summary>'
let g:blamer_enabled = 1
"git blamer
Plug 'APZelos/blamer.nvim'
"git
Plug 'tpope/vim-fugitive'
"git gutter
Plug 'airblade/vim-gitgutter'

"Plug 'iamcco/sran.nvim', { 'do': { -> sran#util#install() } }
"Plug 'iamcco/git-p.nvim'
set updatetime=50
"vim system copy
"Plug 'christoomey/vim-system-copy'

"Rust
Plug 'rust-lang/rust.vim'
"async
let g:LanguageClient_autoStart = 1
"nnoremap <leader>lcs :LanguageClientStart<CR>
"let g:LanguageClient_serverCommands = {
"   \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
"  \ 'javascript': ['javascript-typescript-stdio']
""}
"For a better TS highlighting ( optional chaining does not break syntax, etc. )
Plug 'HerringtonDarkholme/yats.vim'
"Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
" For async completion
"Plug 'Shougo/deoplete.nvim'
" For Denite features
"Plug 'Shougo/denite.nvim'

"Plug 'tpope/vim-vinegar'

" Autoclose html (deoplete doesnt work, investigate further);
Plug 'alvan/vim-closetag'
" Enable deoplete at startup

  let g:deoplete#enable_at_startup = 1
"let g:LanguageClient_serverCommands = {
      \ 'typescript': ['~/.node-bin/javascript-typescript-langserver', '--stdio'],
      \ 'typescript.tsx': ['~/.node-bin/javascript-typescript-langserver', '--stdio'],
      \}
"clipboard
:inoremap <C-v> <ESC>"+p<S-v>==ea
:vnoremap <C-c> "+y
:nnoremap <C-S-v> "+p
:vnoremap <C-d> "+d
" set clipboard+=unnamedplus
"prettify
"command! -nargs=0 Prettier :CocCommand prettier.formatFile

"Plug 'prettier/vim-prettier', { 'do': 'npm install' }
"let g:prettier#config#use_tabs = 'false'
"let g:prettier#config#parser = 'babylon'
if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
        \ 'whitelist': ['rust'],
        \ })
	endif
call plug#end()

autocmd BufReadPost *.rs setlocal filetype=rust
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }

" Automatically start language servers.
let g:LanguageClient_autoStart = 1

" Maps K to hover, gd to goto definition, F2 to rename
nnoremap <silent> K :call LanguageClient_textDocument_hover()
nnoremap <silent> gd :call LanguageClient_textDocument_definition()
"nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()

" autocmd vimenter * if !argc() | NERDTree | endif

function! CtrlPCommand()
    let c = 0
    let wincount = winnr('$')
    " Don't open it here if current buffer is not writable (e.g. NERDTree)
    while !empty(getbufvar(+expand("<abuf>"), "&buftype")) && c < wincount
        exec 'wincmd w'
        let c = c + 1
    endwhile
    exec 'Files<C-R>=expand(fnamemodify(\'.\', \':p\'))<CR><CR>'
endfunction

command! -bang -nargs=? -complete=dir GFiles
      \ call fzf#vim#files(<q-args>, {'options': ['-e', '--no-extended']}, <bang>0)
let g:ctrlp_cmd = 'call CtrlPCommand()'

let windowMaximized = 1
function! ToggleWindowMaximize()
 if g:windowMaximized
   :exe "normal \<C-w>_ \<C-w>|"
   let g:windowMaximized = 0
 else
   :exe "normal \<C-w>="
   let g:windowMaximized = 1
 endif
endfunction
"keybindings
"select in 
nnoremap <leader>]] vi[
nnoremap <leader>[[ vi[
nnoremap <leader>99 vi(
nnoremap <leader>00 vi(
nnoremap <leader>88 vi" 
nnoremap <leader>77 vi' 
nnoremap <leader>66 vi' 

nmap <leader>tgb :Telescope git_branches<cr>
nmap <leader>tgc :Telescope git_commits<cr>
nmap <leader>tgs :Telescope git_status<cr>
nmap <leader>tb :Telescope buffers<cr>
nmap <leader>tf :Telescope live_grep<cr>
nmap <leader>tt :Telescope<cr>

map <C-A-w> :only<cr>
" nnoremap <C-^> <leader>b
nmap <C-X> :call ToggleWindowMaximize()<cr>
nmap <leader>ac /constructor<Esc>:nohl<cr>f(a<cr>
nmap <leader>at /.component.html<cr>gf
map <leader>gt :!st -e tig <cr><cr>
map <leader>gg :!git gui<cr><cr>
map <leader>gb :BlamerToggle<cr><cr>
map <leader>rz :vsplit<cr>:split<cr>
map <leader>gp  :GitGutterPreviewHunk<cr>
map <leader>gu  :GitGutterUndoHunk<cr>
" map <leader>nn :NnnPicker '%:p:h'<cr>
" map <leader>rr :RangerEdit<cr>
" map <leader>rv :RangerVSplit<cr>
" map <leader>rs :RangerSplit<cr>
" map <leader>rt :RangerTab<cr>
" map <leader>ri :RangerInsert<cr>
" map <leader>ra :RangerAppend<cr>
" map <leader>rc :set operatorfunc=RangerChangeOperator<cr>g@
" map <leader>rd :RangerCD<cr>
" map <leader>rld :RangerLCD<cr>
" inoremap <leader>n : RnvimrToggle<cr>
" nnoremap <leader>n : RnvimrToggle<cr>
nnoremap p p=`]
nnoremap P P=`]
inoremap <A-h> <Left>
inoremap <A-j> <Down>
inoremap <A-k> <Up>
inoremap <A-l> <Right>
inoremap <C-t> :tabnew<cr><cr>
inoremap <C-S> <Esc>:w<cr>
nnoremap <C-S> :w<cr>
nnoremap <C-A-s> :wall<cr>
inoremap <C-A-s> :wall<cr>
nnoremap <CR> :noh<CR>
nmap <leader>w :wall<CR><CR>
"nmap <F6> : NERDTreeToggle pwd<CR> 
nmap <F10> : Prettier<CR>
nnoremap <C-p> :Rooter \| Files <CR>
"nnoremap <C-p> :Rooter \| call fzf#vim#files('.', {'options':'--query '.expand('<cword>')})<CR>
"nmap <C-p> : call CtrlPCommand()
" imap <C-space> <Plug>(asyncomplete_force_refresh)
" nnoremap   <silent>   <F7>    :FloatermNew<CR>
tnoremap   <silent>   <F3>    <C-\><C-n>:FloatermNew<CR>
" nnoremap   <silent>   <F8>    :FloatermPrev<CR>
tnoremap   <silent>   <F1>    <C-\><C-n>:FloatermPrev<CR>
" nnoremap   <silent>   <F9>    :FloatermNext<CR>
tnoremap   <silent>   <F2>    <C-\><C-n>:FloatermNext<CR>
" nnoremap   <silent>   <F9>   :FloatermToggle<CR>
tnoremap   <silent>   <F9>   <C-\><C-n>:FloatermToggle<CR>
" tmap <F9> <C-\><C-n> :FloatermHide<cr>
" tmap <F1> <C-\><C-n> :FloatermPrev<cr>
" tmap <F2> <C-\><C-n> :FloatermNext<cr>
" tmap <F3> <C-\><C-n> :FloatermNew<cr>
" tmap <F4> <C-\><C-n> :FloatermKill<cr>
nmap <A-F> : Rooter \| Rg<CR>
nmap <leader>rg : Rooter \| Rg<CR>
nmap <C-l> : vertical resize +1 <CR>
nmap <C-h> : vertical resize -1 <CR>
nmap <C-j> : resize +1 <CR>
nmap <C-k> : resize -1 <CR>
nmap <M-]> :bnext<CR>
nmap <M-[> :bprev<CR>
nmap <A-h> :tabprev<CR>
nmap <A-l> :tabnext<CR>
nmap <leader>z :tabnew<CR>
" nmap <leader>h :tabprevious<CR>
nmap <F3> <Plug>(coc-rename)
nmap <F4> : bp<bar>sp<bar>bn<bar>bd<CR>
nmap <F6> : Rooter<cr>
nmap <F7> : CocFix<CR>
nmap <F8> : TagbarToggle<CR>
nmap <F9> : FloatermToggle<CR>
" tnoremap <esc><esc> <c-\><c-n> :FloatermToggle<cr>
nmap <F11> <Plug>(coc-references)
nmap <F12> : call CocActionAsync('jumpDefinition')<CR>
nmap gd : call CocActionAsync('jumpDefinition')<CR>
"nmap <Space> : noh<CR>
"nmap f <Plug>(easymotion-prefix)
nmap L <c-w><c-w>
nmap H <c-w>W
nmap <M-p> o<ESC>p
nmap <M-P> O<ESC>p
" nnoremap <C-
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
" press <esc> to cancel.
" vmap <leader>cf  <Plug>(coc-format-selected)
" nmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>f :Telescope current_buffer_fuzzy_find<cr>

" search visuallly selected text
vmap <leader>f y/\V<C-R>=escape(@",'/\')<CR><CR>

augroup Smartf
  autocmd User SmartfEnter :hi Conceal ctermfg=220 guifg=#6638F0
  autocmd User SmartfLeave :hi Conceal ctermfg=239 guifg=#504945
augroup end
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" autocmd VimEnter *
"             \   if !argc()
"             \ |   Startify
"             \ |   wincmd w
"             \ | endif


"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"autocmd bufenter * BlamerShow
" check file change every 4 seconds ('CursorHold') and reload the buffer upon detecting change
set autoread
au CursorHold * checktime
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:rooter_patterns = ['Makefile', '*.sln', 'build/env.sh', 'package.json', 'src']
let g:coc_snippet_next = '<tab>'
autocmd VimEnter * Rooter
" autocmd VimEnter * !export $CURRENT_GIT_DIR=%:p:h
"au BufRead,BufNewFile * NERDTreeFInd
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" let g:user_emmet_leader_key=''
let g:user_emmet_settings = {
      \  'html' : {
      \    'indent_blockelement': 1,
      \  },
      \}
"Startify with Rooter
let g:startify_change_to_dir = 0
" Check if NERDTree is open or active

function! IsNERDTreeOpen()        

  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)

endfunction



" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable

" file, and we're not in vimdiff

" function! SyncTree()

"   if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff

"     NERDTreeFind

"     wincmd p

"   endif

" endfunction



" Highlight currently open buffer in NERDTree

" autocmd BufEnter * call SyncTree()

autocmd VimResized * wincmd =
"colorscheme
" colorscheme blue-moon
" colorscheme OceanicNext
let g:falcon_airline = 1
let g:airline_theme = 'falcon'
" colorscheme falcon
" colorscheme alduin
" let sierra_Midnight = 1
" colorscheme sierra
colorscheme base16-grayscale-dark
"transparent background
" hi! Normal ctermbg=NONE guibg=NONE
" hi! NonText ctermbg=NONE guibg=NONE

" let g:lf_command_override = 'lfrun'
" augroup BgHighlight
"     autocmd!
"     autocmd WinEnter * set cul
"     autocmd WinLeave * set nocul
" augroup END
let g:tagbar_type_typescript = {
      \ 'ctagstype': 'typescript',
      \ 'kinds': [
      \ 'c:classes',
      \ 'n:modules',
      \ 'f:functions',
      \ 'v:variables',
      \ 'v:varlambdas',
      \ 'm:members',
      \ 'i:interfaces',
      \ 'e:enums',
      \ ]
      \ }

let g:lightline = { 'colorscheme': 'apprentice' }
